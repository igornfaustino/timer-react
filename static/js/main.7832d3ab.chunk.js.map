{"version":3,"sources":["utils/format.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["formatNumberToTime","number","toString","Timer","initialTimeSeconds","currentTimeSeconds","message","useMemo","clockClassName","clock","minutes","parseInt","seconds","className","App","useState","speed","setSpeed","playing","setPlaying","setInitialTimeSeconds","setCurrentTimeSeconds","handleInput","useCallback","e","timeInSeconds","target","value","handlePause","prev","handleReset","intervalMs","playDisabled","playButton","id","onClick","disabled","resetButton","speedButtons","undefined","useEffect","interval","setInterval","newTime","clearInterval","htmlFor","placeholder","onChange","type","min","max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7832d3ab.chunk.js","sourcesContent":["export const formatNumberToTime = (number) => {\n  if (number > 9) return number.toString();\n\n  return `0${number.toString()}`;\n};\n","import React, { useMemo } from 'react';\n\nimport './Timer.css';\nimport { formatNumberToTime } from '../utils/format';\n\nconst Timer = ({ initialTimeSeconds, currentTimeSeconds }) => {\n  const message = useMemo(() => {\n    if (initialTimeSeconds === 0) return;\n    if (currentTimeSeconds === 0) return <div>Timeâ€™s up!</div>;\n    if (currentTimeSeconds <= initialTimeSeconds / 2)\n      return <div>More than halfway there!</div>;\n  }, [currentTimeSeconds, initialTimeSeconds]);\n\n  const clockClassName = useMemo(() => {\n    if (initialTimeSeconds === 0) return '';\n    if (currentTimeSeconds <= 10 && currentTimeSeconds > 0) return 'blinking';\n    if (currentTimeSeconds <= 20) return 'warning';\n    return '';\n  }, [currentTimeSeconds, initialTimeSeconds]);\n\n  const clock = useMemo(() => {\n    const minutes = formatNumberToTime(parseInt(currentTimeSeconds / 60));\n    const seconds = formatNumberToTime(currentTimeSeconds % 60);\n    return (\n      <div className={`clock ${clockClassName}`}>\n        {minutes}:{seconds}\n      </div>\n    );\n  }, [clockClassName, currentTimeSeconds]);\n\n  return (\n    <div>\n      {message}\n      {clock}\n    </div>\n  );\n};\n\nexport default Timer;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport './App.css';\nimport Timer from './components/Timer';\n\nfunction App() {\n  const [speed, setSpeed] = useState(1);\n  const [playing, setPlaying] = useState(false);\n  const [initialTimeSeconds, setInitialTimeSeconds] = useState(0);\n  const [currentTimeSeconds, setCurrentTimeSeconds] = useState(0);\n\n  const handleInput = useCallback((e) => {\n    const timeInMinutes = parseInt(e.target.value);\n    const timeInSeconds = timeInMinutes * 60;\n    setInitialTimeSeconds(timeInSeconds);\n    setCurrentTimeSeconds(timeInSeconds);\n  }, []);\n\n  const handlePause = useCallback(() => {\n    setPlaying((prev) => !prev);\n  }, []);\n\n  const handleReset = useCallback(() => {\n    setCurrentTimeSeconds(initialTimeSeconds);\n    setPlaying(true);\n  }, [initialTimeSeconds]);\n\n  const intervalMs = useMemo(() => 1000 / speed, [speed]);\n\n  const playDisabled = useMemo(() => currentTimeSeconds <= 0, [\n    currentTimeSeconds,\n  ]);\n\n  const playButton = useMemo(() => {\n    if (playing)\n      return (\n        <button id=\"playBtn\" onClick={handlePause}>\n          Pause\n        </button>\n      );\n\n    return (\n      <button id=\"playBtn\" onClick={handlePause} disabled={playDisabled}>\n        Play\n      </button>\n    );\n  }, [handlePause, playDisabled, playing]);\n\n  const resetButton = useMemo(\n    () => (\n      <button\n        onClick={handleReset}\n        disabled={currentTimeSeconds === initialTimeSeconds}\n      >\n        Reset\n      </button>\n    ),\n    [currentTimeSeconds, handleReset, initialTimeSeconds]\n  );\n\n  const speedButtons = useMemo(() => {\n    return (\n      <>\n        <button\n          id=\"btn1x\"\n          onClick={() => setSpeed(1)}\n          className={speed === 1 ? 'selected' : undefined}\n        >\n          1x\n        </button>\n        <button\n          id=\"btn1_5x\"\n          onClick={() => setSpeed(1.5)}\n          className={speed === 1.5 ? 'selected' : undefined}\n        >\n          1.5x\n        </button>\n        <button\n          id=\"btn2x\"\n          onClick={() => setSpeed(2)}\n          className={speed === 2 ? 'selected' : undefined}\n        >\n          2x\n        </button>\n      </>\n    );\n  }, [speed]);\n\n  useEffect(() => {\n    if (!playing) return;\n    const interval = setInterval(() => {\n      setCurrentTimeSeconds((prev) => {\n        const newTime = prev - 1 > 0 ? prev - 1 : 0;\n        if (newTime <= 0) clearInterval(interval);\n        return newTime;\n      });\n    }, intervalMs);\n    return () => clearInterval(interval);\n  }, [intervalMs, playing]);\n\n  useEffect(() => {\n    if (currentTimeSeconds <= 0) setPlaying(false);\n  }, [currentTimeSeconds]);\n\n  return (\n    <div className=\"App\">\n      <label htmlFor=\"minutes\">Countdown: </label>\n      <input\n        id=\"minutes\"\n        placeholder=\"(min)\"\n        onChange={handleInput}\n        type=\"number\"\n        value={initialTimeSeconds / 60}\n        min={0}\n        max={59}\n      />\n      <Timer\n        currentTimeSeconds={currentTimeSeconds}\n        initialTimeSeconds={initialTimeSeconds}\n      />\n      {playButton}\n      {resetButton}\n      {speedButtons}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}